{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundry.js","containers/App.js","serviceWorker.js","index.js"],"names":["Card","props","date","Date","className","alt","src","id","name","email","toLocaleString","CardList","robots","cardsArray","map","user","i","key","SearchBox","searchChange","type","placeholder","onChange","Scroll","console","log","style","overflow","border","height","children","ErrorBoundry","state","hasError","this","Component","App","onSearchChange","event","setState","searchfield","target","value","fetch","then","response","json","users","filteredRobots","filter","robot","toLowerCase","includes","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"2OAmBeA,EAjBF,SAACC,GAEd,IAAMC,EAAO,IAAIC,KAEhB,OAEG,yBAAKC,UAAU,+CACZ,yBAAKC,IAAI,SAASC,IAAG,mCAA8BL,EAAMM,MACxD,6BACH,4BAAKN,EAAMO,MACX,2BAAIP,EAAMQ,OACV,8BAAOP,EAAKQ,qBCGFC,EAbE,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OAEbC,EAAaD,EAAOE,KAAI,SAACC,EAAMC,GAEpC,OAAO,kBAAC,EAAD,CAAMC,IAAKD,EAAGR,KAAMI,EAAOI,GAAGR,KAAMD,GAAIK,EAAOI,GAAGT,GAAIE,MAAOG,EAAOI,GAAGP,WAG/E,OACE,6BACGI,ICQSK,EAlBG,SAAC,GAAsB,IAApBC,EAAmB,EAAnBA,aAElB,OAEC,yBAAKf,UAAU,OAEf,2BACAA,UAAU,mCACVgB,KAAK,SACLC,YAAY,gBACZC,SAAUH,MCKCI,EAfA,SAACtB,GAIf,OADDuB,QAAQC,IAAIxB,GAGH,yBAAKyB,MAAO,CAAEC,SAAU,SAAUC,OAAQ,kBAAmBC,OAAQ,UACnE5B,EAAM6B,WCmBFC,E,YAtBd,aAAc,IAAD,8BACZ,+CACKC,MAAQ,CAEVC,UAAW,GAJF,E,sEAWX,OAAGC,KAAKF,MAAMC,SAEN,+DAGFC,KAAKjC,MAAM6B,a,GAnBOK,aCiEZC,G,kBA1Df,aAAc,IAAD,8BACZ,+CAwBAC,eAAiB,SAACC,GAEjB,EAAKC,SAAS,CAAEC,YAAaF,EAAMG,OAAOC,SAzB3C,EAAKV,MAAQ,CAEZpB,OAAQ,GACR4B,YAAa,IAGdhB,QAAQC,IAAI,eARA,E,iFAYQ,IAAD,OAEjBkB,MAAM,8CAA8CC,MAAK,SAAAC,GAExD,OAAOA,EAASC,UACdF,MAAK,SAAAG,GAEP,EAAKR,SAAS,CAAE3B,OAAQmC,OAG1BvB,QAAQC,IAAI,uB,+BASJ,IAAD,OAEDuB,EAAiBd,KAAKF,MAAMpB,OAAOqC,QAAO,SAAAC,GAEhD,OAAOA,EAAM1C,KAAK2C,cAAcC,SAAS,EAAKpB,MAAMQ,YAAYW,kBAKhE,OADA3B,QAAQC,IAAI,UAGV,yBAAKrB,UAAU,WAEf,4CACA,kBAAC,EAAD,CAAWe,aAAce,KAAKG,iBAE9B,kBAAC,EAAD,KACC,kBAAC,EAAD,KACD,kBAAC,EAAD,CAAUzB,OAAQoC,W,GAnDJb,cCIEkB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCXNC,IAASC,OACR,kBAAC,EAAD,MACGC,SAASC,eAAe,SD0HtB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMpB,MAAK,SAAAqB,GACjCA,EAAaC,iB","file":"static/js/main.4b12ed91.chunk.js","sourcesContent":["import React from 'react';\n\nconst Card = (props) => {\n\nconst date = new Date();\n\n\treturn (\n\n    <div className='bg-light-blue dib br3 ma2 grow bw2 shadow-5'> \n       <img alt='robots' src={`https://robohash.org/test${props.id}`}/>\n        <div>\t\n\t    <h2>{props.name}</h2>\n\t    <p>{props.email}</p>\n\t    <span>{date.toLocaleString()}</span>\n\t    </div>\n    </div>\n\t);\n}\n\nexport default Card;","import React from 'react';\nimport Card from './Card';\n\nconst CardList = ({ robots }) => {\n\n\tconst cardsArray = robots.map((user, i) => {\n        \n\t\treturn <Card key={i} name={robots[i].name} id={robots[i].id} email={robots[i].email}/>\n\t});\n\n\treturn (\n\t\t\t<div>\n\t\t\t  {cardsArray}\n\t\t\t</div>\n\t\t);\n}\nexport default CardList;","import React from 'react';\n\nconst SearchBox = ({ searchChange }) => {\n\n   return (\n\n   \t<div className='pa2'>\n   \t\n   \t<input \n   \tclassName='pa3 ba b--green bg-lightest-blue'\n   \ttype='search' \n   \tplaceholder='search robots'\n   \tonChange={searchChange}\n   \t/>\t\n\n   \t</div>\n\n   \t);\n}\n\nexport default SearchBox;","import React from 'react';\n\nconst Scroll = (props) =>{\n\n\nconsole.log(props);\n\treturn (\n\n         <div style={{ overflow: 'scroll', border: '5px solid white', height: '800px'}}>\n         \t{props.children}\n         </div>\n\n\n\t\t);\n\n};\n\nexport default Scroll;","import React, { Component } from 'react';\n\n\nclass ErrorBoundry extends Component\n{\n\n\tconstructor(){\n\t\tsuper();\n\t\tthis.state = {\n\n\t\t   hasError : false\n\t    }\n\n\t}\n\n\trender(){\n\n \t\tif(this.state.hasError){\n\n \t\t\treturn <h1>Oooops! Something is not good! </h1>\n \t\t}\n\n\t\treturn this.props.children;\n\t}\n\n\n}\n\nexport default ErrorBoundry;","import React, { Component } from 'react';\nimport CardList from '../components/CardList';\nimport SearchBox from '../components/SearchBox';\nimport Scroll from '../components/Scroll';\nimport ErrorBoundry from '../components/ErrorBoundry';\nimport './App.css';\n\n\nclass App extends Component {\n\nconstructor(){\n\tsuper();\n\tthis.state = {\n\n\t\trobots: [],\n\t\tsearchfield: ''\n\t}\n\n\tconsole.log(\"constructor\");\n}\n\n\n\tcomponentDidMount(){\n\n \t\tfetch('https://jsonplaceholder.typicode.com/users').then(response => {\n\n \t\t\treturn response.json();\n \t\t}).then(users => {\n\n \t\t\tthis.setState({ robots: users});\n \t\t});\n        \n\t\tconsole.log(\"componentDidMount\");\n\t}\n\n\tonSearchChange = (event) => {\n\t\t\n\t\tthis.setState({ searchfield: event.target.value });\n\n\t}\n\n\trender(){\n\n\t\tconst filteredRobots = this.state.robots.filter(robot => {\n\n\t\treturn robot.name.toLowerCase().includes(this.state.searchfield.toLowerCase());\n\n\t\t});\n\n\t\tconsole.log(\"render\");\n\t\treturn (\n\n\t\t\t\t<div className='tc test' >\n\n\t\t\t\t<h1> RoboAmigos </h1>\n\t\t\t\t<SearchBox searchChange={this.onSearchChange}/>\n\n\t\t\t\t<Scroll>\n \t\t\t\t<ErrorBoundry>\n\t\t\t\t<CardList robots={filteredRobots}/>\n\t\t\t\t</ErrorBoundry>\n\t\t\t\t</Scroll>\n\n\t\t\t\t</div>\n\t\t\t);\n\t}\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\n\nReactDOM.render(\n\t<App />\n  , document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}